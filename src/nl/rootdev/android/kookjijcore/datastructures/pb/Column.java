// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from column.proto

package nl.rootdev.android.kookjijcore.datastructures.pb;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import nl.rootdev.android.kookjijcore.datastructures.IColumn;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class Column implements Externalizable, Message<Column>, IColumn
{

    public static Schema<Column> getSchema()
    {
        return SCHEMA;
    }

    public static Column getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Column DEFAULT_INSTANCE = new Column();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String name;
    String text;
    String image;

    public Column()
    {
        
    }

    public Column(
        String name,
        String text
    )
    {
        this.name = name;
        this.text = text;
    }

    // getters and setters

    // name

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    // text

    public String getText()
    {
        return text;
    }

    public void setText(String text)
    {
        this.text = text;
    }

    // image

    public String getImage()
    {
        return image;
    }

    public void setImage(String image)
    {
        this.image = image;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<Column> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<Column> SCHEMA = new Schema<Column>()
    {
        // schema methods

        public Column newMessage()
        {
            return new Column();
        }

        public Class<Column> typeClass()
        {
            return Column.class;
        }

        public String messageName()
        {
            return Column.class.getSimpleName();
        }

        public String messageFullName()
        {
            return Column.class.getName();
        }

        public boolean isInitialized(Column message)
        {
            return 
                message.name != null 
                && message.text != null;
        }

        public void mergeFrom(Input input, Column message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.name = input.readString();
                        break;
                    case 2:
                        message.text = input.readString();
                        break;
                    case 3:
                        message.image = input.readString();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, Column message) throws IOException
        {
            if(message.name == null)
                throw new UninitializedMessageException(message);
            output.writeString(1, message.name, false);

            if(message.text == null)
                throw new UninitializedMessageException(message);
            output.writeString(2, message.text, false);

            if(message.image != null)
                output.writeString(3, message.image, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "name";
                case 2: return "text";
                case 3: return "image";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("name", 1);
            fieldMap.put("text", 2);
            fieldMap.put("image", 3);
        }
    };
    
}
