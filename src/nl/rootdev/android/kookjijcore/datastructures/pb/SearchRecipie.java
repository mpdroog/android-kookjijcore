// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from search_recipie.proto

package nl.rootdev.android.kookjijcore.datastructures.pb;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import nl.rootdev.android.kookjijcore.datastructures.ISearchRecipie;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class SearchRecipie implements Externalizable, Message<SearchRecipie>, ISearchRecipie
{

    public static Schema<SearchRecipie> getSchema()
    {
        return SCHEMA;
    }

    public static SearchRecipie getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final SearchRecipie DEFAULT_INSTANCE = new SearchRecipie();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer setResultpages;
    List<Recipie> recipies;

    public SearchRecipie()
    {
        
    }

    // getters and setters

    // setResultpages

    public Integer getSetResultpages()
    {
        return setResultpages;
    }

    public void setSetResultpages(Integer setResultpages)
    {
        this.setResultpages = setResultpages;
    }

    // recipies

    public List<Recipie> getRecipiesList()
    {
        return recipies;
    }

    public void setRecipiesList(List<Recipie> recipies)
    {
        this.recipies = recipies;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<SearchRecipie> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<SearchRecipie> SCHEMA = new Schema<SearchRecipie>()
    {
        // schema methods

        public SearchRecipie newMessage()
        {
            return new SearchRecipie();
        }

        public Class<SearchRecipie> typeClass()
        {
            return SearchRecipie.class;
        }

        public String messageName()
        {
            return SearchRecipie.class.getSimpleName();
        }

        public String messageFullName()
        {
            return SearchRecipie.class.getName();
        }

        public boolean isInitialized(SearchRecipie message)
        {
            return true;
        }

        public void mergeFrom(Input input, SearchRecipie message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.setResultpages = input.readUInt32();
                        break;
                    case 2:
                        if(message.recipies == null)
                            message.recipies = new ArrayList<Recipie>();
                        message.recipies.add(input.mergeObject(null, Recipie.getSchema()));
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, SearchRecipie message) throws IOException
        {
            if(message.setResultpages != null)
                output.writeUInt32(1, message.setResultpages, false);

            if(message.recipies != null)
            {
                for(Recipie recipies : message.recipies)
                {
                    if(recipies != null)
                        output.writeObject(2, recipies, Recipie.getSchema(), true);
                }
            }

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "setResultpages";
                case 2: return "recipies";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("setResultpages", 1);
            fieldMap.put("recipies", 2);
        }
    };
    
}
