// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from category.proto

package nl.rootdev.android.kookjijcore.datastructures.pb;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import nl.rootdev.android.kookjijcore.datastructures.ICategory;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class Category implements Externalizable, Message<Category>, ICategory
{

    public static Schema<Category> getSchema()
    {
        return SCHEMA;
    }

    public static Category getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Category DEFAULT_INSTANCE = new Category();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer setCurpage;
    Integer setResultpages;
    List<CategoryItem> items;

    public Category()
    {
        
    }

    public Category(
        Integer setCurpage,
        Integer setResultpages
    )
    {
        this.setCurpage = setCurpage;
        this.setResultpages = setResultpages;
    }

    // getters and setters

    // setCurpage

    public Integer getSetCurpage()
    {
        return setCurpage;
    }

    public void setSetCurpage(Integer setCurpage)
    {
        this.setCurpage = setCurpage;
    }

    // setResultpages

    public Integer getSetResultpages()
    {
        return setResultpages;
    }

    public void setSetResultpages(Integer setResultpages)
    {
        this.setResultpages = setResultpages;
    }

    // items

    public List<CategoryItem> getItemsList()
    {
        return items;
    }

    public void setItemsList(List<CategoryItem> items)
    {
        this.items = items;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<Category> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<Category> SCHEMA = new Schema<Category>()
    {
        // schema methods

        public Category newMessage()
        {
            return new Category();
        }

        public Class<Category> typeClass()
        {
            return Category.class;
        }

        public String messageName()
        {
            return Category.class.getSimpleName();
        }

        public String messageFullName()
        {
            return Category.class.getName();
        }

        public boolean isInitialized(Category message)
        {
            return 
                message.setCurpage != null 
                && message.setResultpages != null;
        }

        public void mergeFrom(Input input, Category message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.setCurpage = input.readUInt32();
                        break;
                    case 2:
                        message.setResultpages = input.readUInt32();
                        break;
                    case 3:
                        if(message.items == null)
                            message.items = new ArrayList<CategoryItem>();
                        message.items.add(input.mergeObject(null, CategoryItem.getSchema()));
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, Category message) throws IOException
        {
            if(message.setCurpage == null)
                throw new UninitializedMessageException(message);
            output.writeUInt32(1, message.setCurpage, false);

            if(message.setResultpages == null)
                throw new UninitializedMessageException(message);
            output.writeUInt32(2, message.setResultpages, false);

            if(message.items != null)
            {
                for(CategoryItem items : message.items)
                {
                    if(items != null)
                        output.writeObject(3, items, CategoryItem.getSchema(), true);
                }
            }

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "setCurpage";
                case 2: return "setResultpages";
                case 3: return "items";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("setCurpage", 1);
            fieldMap.put("setResultpages", 2);
            fieldMap.put("items", 3);
        }
    };
    
}
